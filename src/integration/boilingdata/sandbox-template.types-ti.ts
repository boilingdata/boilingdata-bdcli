/**
 * This module was automatically generated by `ts-interface-builder`
 */
import * as t from "ts-interface-checker";
// tslint:disable:object-literal-key-quotes

export const EModelFormat = t.enumtype({
  "NDJSON": "ndjson",
  "AVRO": "avro",
  "CSV": "csv",
});

export const EPermission = t.enumtype({
  "READ": "read",
  "WRITE": "write",
});

export const ITemplateStorage = t.iface([], {
  "name": "string",
  "permissions": t.array(t.iface([], {
    "urlPrefix": "string",
    "accessRights": t.opt(t.array("EPermission")),
  })),
});

export const ITemplateTap = t.iface([], {
  "name": "string",
  "models": t.opt(t.array(t.iface([], {
    "name": "string",
    "model": t.opt(t.array("string")),
    "format": t.opt("EModelFormat"),
  }))),
});

export const ITemplatePipe = t.iface([], {
  "name": "string",
  "input": "string",
  "keys": t.opt(t.array("string")),
  "transformSql": t.opt("string"),
  "output": t.opt(t.union("string", t.array("string"))),
  "errors": t.opt("string"),
});

export const ITemplateShare = t.iface([], {
  "name": "string",
  "users": t.array("string"),
  "sql": t.opt("string"),
  "source": t.opt("string"),
  "target": t.opt("string"),
});

export const ITemplate = t.iface([], {
  "version": t.union("string", "number"),
  "id": "string",
  "region": "string",
  "resources": t.iface([], {
    "storage": "ITemplateStorage",
    "taps": t.opt(t.array("ITemplateTap")),
    "pipes": t.opt(t.array("ITemplatePipe")),
    "shares": t.opt(t.array("ITemplateShare")),
  }),
});

const exportedTypeSuite: t.ITypeSuite = {
  EModelFormat,
  EPermission,
  ITemplateStorage,
  ITemplateTap,
  ITemplatePipe,
  ITemplateShare,
  ITemplate,
};
export default exportedTypeSuite;
